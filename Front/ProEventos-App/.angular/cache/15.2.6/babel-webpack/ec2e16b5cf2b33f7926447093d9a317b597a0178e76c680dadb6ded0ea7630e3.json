{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { take } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EventoService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = environment.apiURL + 'api/eventos';\n    this.tokenHeader = new HttpHeaders({\n      'Authorization': `Bearer ${localStorage.getItem('token')}`\n    });\n  }\n  //public getEventos(): Observable<Evento[]> {\n  //  return this.http.get<Evento[]>(this.baseURL).pipe(take(1));\n  //}\n  getAllEvento() {\n    return this.http.get(this.baseURL, {\n      headers: this.tokenHeader\n    });\n  }\n  getEventos() {\n    return this.http.get(this.baseURL, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n  }\n  getEventosByTema(tema) {\n    return this.http.get(`${this.baseURL}/${tema}/tema`).pipe(take(1));\n  }\n  getEventoById(id) {\n    return this.http.get(`${this.baseURL}/${id}`).pipe(take(1));\n  }\n  post(evento) {\n    return this.http.post(this.baseURL, evento, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n  }\n  put(evento) {\n    return this.http.put(`${this.baseURL}/${evento.id}`, evento).pipe(take(1));\n  }\n  deleteEvento(id) {\n    return this.http.delete(`${this.baseURL}/${id}`).pipe(take(1));\n  }\n  postUpload(eventoId, file) {\n    const fileToUpload = file[0];\n    const formData = new FormData();\n    formData.append('file', fileToUpload);\n    return this.http.post(`${this.baseURL}/upload-image/${eventoId}`, formData).pipe(take(1));\n  }\n}\nEventoService.ɵfac = function EventoService_Factory(t) {\n  return new (t || EventoService)(i0.ɵɵinject(i1.HttpClient));\n};\nEventoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventoService,\n  factory: EventoService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,IAAI,QAAQ,gBAAgB;AACrC,SAASC,WAAW,QAAQ,2BAA2B;;;AAKvD,OAAM,MAAOC,aAAa;EAIxBC,WAAA,CAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM,GAAG,aAAa;IAI1C,IAAI,CAACC,WAAW,GAAG,IAAIR,WAAW,CAAC;MAAC,eAAe,EAAE,UAAUS,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAAE,CAAC,CAAC;EAClG;EAEA;EACA;EACA;EAEOC,YAAY;IACb,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAW,IAAI,CAACN,OAAO,EAAG;MAACO,OAAO,EAAE,IAAI,CAACL;IAAW,CAAC,CAAC;EAChF;EAEOM,UAAU;IACf,OAAO,IAAI,CAACT,IAAI,CACbO,GAAG,CAAW,IAAI,CAACN,OAAO,EAAE;MAACO,OAAO,EAAE,IAAI,CAACL;IAAW,CAAC,CAAC,CACxDO,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;EAClB;EAEOe,gBAAgB,CAACC,IAAY;IAClC,OAAO,IAAI,CAACZ,IAAI,CACbO,GAAG,CAAW,GAAG,IAAI,CAACN,OAAO,IAAIW,IAAI,OAAO,CAAC,CAC7CF,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;EAClB;EAEOiB,aAAa,CAACC,EAAU;IAC7B,OAAO,IAAI,CAACd,IAAI,CACbO,GAAG,CAAS,GAAG,IAAI,CAACN,OAAO,IAAIa,EAAE,EAAE,CAAC,CACpCJ,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;EAClB;EAEOmB,IAAI,CAACC,MAAc;IACxB,OAAO,IAAI,CAAChB,IAAI,CACbe,IAAI,CAAS,IAAI,CAACd,OAAO,EAAEe,MAAM,EAAG;MAACR,OAAO,EAAE,IAAI,CAACL;IAAW,CAAC,CAAC,CAChEO,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;EAClB;EAEOqB,GAAG,CAACD,MAAc;IACvB,OAAO,IAAI,CAAChB,IAAI,CACbiB,GAAG,CAAS,GAAG,IAAI,CAAChB,OAAO,IAAIe,MAAM,CAACF,EAAE,EAAE,EAAEE,MAAM,CAAC,CACnDN,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;EAClB;EAEOsB,YAAY,CAACJ,EAAU;IAC5B,OAAO,IAAI,CAACd,IAAI,CACbmB,MAAM,CAAC,GAAG,IAAI,CAAClB,OAAO,IAAIa,EAAE,EAAE,CAAC,CAC/BJ,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;EAClB;EAEAwB,UAAU,CAACC,QAAgB,EAAEC,IAAU;IACrC,MAAMC,YAAY,GAAGD,IAAI,CAAC,CAAC,CAAS;IACpC,MAAME,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,YAAY,CAAC;IAErC,OAAO,IAAI,CAACvB,IAAI,CACbe,IAAI,CAAS,GAAG,IAAI,CAACd,OAAO,iBAAiBoB,QAAQ,EAAE,EAAEG,QAAQ,CAAC,CAClEd,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;EAClB;;AA5DWE,aAAa;mBAAbA,aAAa,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAbhC,aAAa;SAAbA,aAAa;EAAAiC,OAAA,EAAbjC,aAAa,CAAAkC;AAAA","names":["HttpHeaders","take","environment","EventoService","constructor","http","baseURL","apiURL","tokenHeader","localStorage","getItem","getAllEvento","get","headers","getEventos","pipe","getEventosByTema","tema","getEventoById","id","post","evento","put","deleteEvento","delete","postUpload","eventoId","file","fileToUpload","formData","FormData","append","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sourceRoot":"","sources":["C:\\Projetos\\ProEventos-Final\\Front\\ProEventos-App\\src\\app\\services\\evento.service.ts"],"sourcesContent":["import { Evento } from './../models/Evento';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { environment } from '@environments/environment';\r\n\r\n@Injectable(\r\n //{ providedIn: 'root'} 1a maneira\r\n)\r\nexport class EventoService {\r\n  baseURL = environment.apiURL + 'api/eventos';\r\n  tokenHeader: HttpHeaders;\r\n\r\n  constructor(private http: HttpClient) { \r\n    this.tokenHeader = new HttpHeaders({'Authorization': `Bearer ${localStorage.getItem('token')}`})\r\n  }\r\n\r\n  //public getEventos(): Observable<Evento[]> {\r\n  //  return this.http.get<Evento[]>(this.baseURL).pipe(take(1));\r\n  //}\r\n\r\n  public getAllEvento(): Observable<Evento[]> {\r\n        return this.http.get<Evento[]>(this.baseURL,  {headers: this.tokenHeader});\r\n  }\r\n\r\n  public getEventos(): Observable<Evento[]> {\r\n    return this.http\r\n      .get<Evento[]>(this.baseURL, {headers: this.tokenHeader})\r\n      .pipe(take(1));\r\n  }\r\n\r\n  public getEventosByTema(tema: string): Observable<Evento[]> {\r\n    return this.http\r\n      .get<Evento[]>(`${this.baseURL}/${tema}/tema`)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  public getEventoById(id: number): Observable<Evento> {\r\n    return this.http\r\n      .get<Evento>(`${this.baseURL}/${id}`)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  public post(evento: Evento): Observable<Evento> {\r\n    return this.http\r\n      .post<Evento>(this.baseURL, evento,  {headers: this.tokenHeader})\r\n      .pipe(take(1));\r\n  }\r\n\r\n  public put(evento: Evento): Observable<Evento> {\r\n    return this.http\r\n      .put<Evento>(`${this.baseURL}/${evento.id}`, evento)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  public deleteEvento(id: number): Observable<any> {\r\n    return this.http\r\n      .delete(`${this.baseURL}/${id}`)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  postUpload(eventoId: number, file: File): Observable<Evento> {\r\n    const fileToUpload = file[0] as File;\r\n    const formData = new FormData();\r\n    formData.append('file', fileToUpload);\r\n\r\n    return this.http\r\n      .post<Evento>(`${this.baseURL}/upload-image/${eventoId}`, formData)\r\n      .pipe(take(1));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}